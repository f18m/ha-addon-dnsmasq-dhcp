---
# inside feature branches it's handy to change the 'version' field to match the branch name
# as reported by the Github Action workflow 'publish.yaml', so that you can force HomeAssistant
# to use the docker image of that feature branch instead of the docker image of 'main', by pointing
# HomeAssistant to that feature branch
version: beta
slug: dnsmasq-dhcp-beta
name: Dnsmasq-DHCP BETA
description: A DHCP server based on dnsmasq
url: https://github.com/f18m/ha-addon-dnsmasq-dhcp-server/tree/main
advanced: true
arch:
  - armhf
  - armv7
  - aarch64
  - amd64
  - i386
host_network: true
image: ghcr.io/f18m/{arch}-addon-dnsmasq-dhcp
init: false
ingress: true
ingress_port: 8100
panel_icon: mdi:ip-network-outline
panel_title: DHCP
options:
  # the interfaces on which the DHCP/DNS server will listen
  # DHCP requests are listened on port 67
  # DNS requests are listened on port 53 (DNS port is configurable via dns_server.port key)
  interfaces:
    - enp1s0
  dhcp_server:
    # default lease time for all DHCP clients except those having an IP address reservation.
    default_lease: 1h
    # the address reservation lease might also be 'infinite' but this is discouraged since
    # it means that the DHCP clients will never come back to this server to refresh their lease
    # and this makes the whole DHCP server less useful... it's better to force the clients
    # to some frequent check-in, since that becomes a basic heartbeat / client health check.
    address_reservation_lease: 1h
    # the addon can detect whether the server which is running the addon has just rebooted;
    # if that's the case and the following flag is set to "true", then the DHCP lease database
    # is reset before starting the DHCP server; this is useful in case a loss of power of the
    # HomeAssistant server means also a loss of power of several/all DHCP clients. In such a case
    # the old DHCP lease database is not useful and actually misleading.
    reset_dhcp_lease_database_on_reboot: false
    # shall log every DHCP request?
    log_requests: true
    # DNS domain to advertise in DHCP answers
    dns_domain: lan
    # DNS servers to advertise in DHCP answers.
    # Note that even if online someone is naming these as "primary" and "secondary" DNS servers,
    # the DHCP clients are free to use them in any order they like, or even to use only one of them.
    # There is no "primary" or "secondary".
    # In particular if you use dns_server.enable=true, then you want to provide ONLY 0.0.0.0
    # (the IP address of the machine running dnsmasq) as DNS server. 
    # If you use dns_server.enable=false, you want to provide some public DNS server (and you can provide
    # more than one if you like), e.g. 8.8.8.8, 1.1.1.1, etc.
    dns_servers:
      - 0.0.0.0  # the special value 0.0.0.0 indicates the IP address of this host -- useful only if dns_server.enable=true
    ntp_servers:
      # define NTP servers to provide to DHCP clients (not all clients will honor this setting though)
      # example1: online NTP servers: check https://www.ntppool.org/zone/@ for details about continental zones:
      - 0.europe.pool.ntp.org
      - 1.europe.pool.ntp.org
      - 2.europe.pool.ntp.org
      # example2: another way to go is to use Google NTP:
      #- time1.google.com
      #- time2.google.com
      #- time3.google.com
      # example3: the entry 0.0.0.0 means "the address of the machine running dnsmasq"
      #- 0.0.0.0

  # dhcp_pools is the core config for the DHCP server.
  # Each entry in the list represents a network segment. 
  # You can have multiple entries
  # for the same "interface" (with same "gateway" and "netmask") to provide disjoint
  # IP address ranges within the same network.
  # You can provide IP ranges of different networks in case e.g. the DHCP server
  # is attached to multiple network interfaces (attached to different networks).
  #
  # Remember that the "gateway" IP address must always be an IP address within the
  # network specified by the "start", "end" and "netmask" properties.
  dhcp_pools:
    - interface: enp1s0
      start: 192.168.1.50
      end: 192.168.1.150
      # the gateway IP address to advertise in DHCP answers
      gateway: 192.168.1.254
      # the netmask to advertise in DHCP answers
      netmask: 255.255.255.0

    - interface: enp1s0
      start: 192.168.1.220
      end: 192.168.1.230
      gateway: 192.168.1.254
      netmask: 255.255.255.0

  dhcp_ip_address_reservations:
    - mac: aa:bb:cc:dd:ee:ff
      name: "An-important-host-with-reserved-IP"
      ip: 192.168.1.15
      # the 'link' property accepts a basic golang template. Available variables are 'mac', 'name' and 'ip'
      # e.g. "http://{{ ip }}/landing/page"
      link: "http://{{ .ip }}/landing-page/for/this/host"
  dhcp_clients_friendly_names:
    - mac: dd:ee:aa:dd:bb:ee
      name: "This is a friendly name to label this host, even if it gets a dynamic IP"
      # the 'link' property accepts a basic golang template. Available variables are 'mac', 'name' and 'ip'
      # e.g. "http://{{ ip }}/landing/page/for/this/dynamic/host"
      link: "http://{{ .ip }}/landing-page/for/this/host"
  dns_server:
    # should this addon provide also a DNS server?
    enable: true
    # on which port the dnsmasq DNS server must listen to?
    port: 53
    # how many entries should be cached on the DNS server to reduce traffic to upstream DNS servers?
    # the max size for this cache is 10k entries according to dnsmasq docs
    cache_size: 10000
    # log_requests will enable logging all DNS requests... which results in a very verbose log!!
    log_requests: false
    # DNS domain to resolve locally
    dns_domain: lan
    # upstream servers to which queries are forwarded when the answer is not cached locally
    upstream_servers:
      - 8.8.8.8
      - 8.8.4.4
  web_ui:
    log_activity: false
    # this addon uses "host_network: true" so the internal HTTP server will bind on the interface
    # provided as network.interface and will occupy a port there; the following parameter makes
    # that port configurable to avoid conflicts with other services
    port: 8976
schema:
  interfaces:
    # we expect a list of valid network interfaces; the character "@" which typically appears in
    # veth pairs (used by docker) is not allowed on-purpose to avoid mistakes where the user
    # provides a docker veth pair as interface for dnsmasq (this is typically not a good idea)
    - match(^([a-z][a-z0-9\.:]*)$)
  dhcp_server:
    default_lease: str
    address_reservation_lease: str
    reset_dhcp_lease_database_on_reboot: bool
    log_requests: bool
    dns_servers:
      - str
    dns_domain: str
    ntp_servers:
      - str
  dhcp_pools:
    - interface: str
      start: str
      end: str
      gateway: str
      netmask: str
  dhcp_ip_address_reservations:
    - ip: str
      mac: match(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)
      # the name in this case must be a valid hostname as per RFC 1123 since it is passed to dnsmasq
      # that will refuse to start if an invalid hostname format is used
      name: match(^[a-zA-Z0-9\-.]*$)
      link: "str?"
  dhcp_clients_friendly_names:
    - mac: match(^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$)
      name: str
      link: "str?"
  dns_server:
    enable: bool
    port: int
    cache_size: int
    log_requests: bool
    dns_domain: str
    upstream_servers:
      - str
  web_ui:
    log_activity: bool
    port: int
startup: system
privileged:
  - NET_ADMIN
